#!/usr/bin/env bash

VERSION=v0.6.1
DEFAULT_BITS_URL="https://raw.githubusercontent.com/capbash/bits/master"
DEFAULT_BITS_MODE=curl
DEFAULT_TOUCH_DIR="/opt"
DEFAULT_INSTALL_DIR="/opt"

#--------------------
# LOGGING SECTION
#--------------------

# Black        0;30     Dark Gray     1;30
# Blue         0;34     Light Blue    1;34
# Green        0;32     Light Green   1;32
# Cyan         0;36     Light Cyan    1;36
# Red          0;31     Light Red     1;31
# Purple       0;35     Light Purple  1;35
# Brown/Orange 0;33     Yellow        1;33
# Light Gray   0;37     White         1;37

# MAC has different names
if [[ `uname` == "Darwin" ]]; then
  BLUE='\x1B[0;34m'
  LIGHT_GREY='\x1B[0;37m'
  DARK_RED='\x1B[1;31m'
  LIGHT_RED='\x1B[0;31m'
  LIGHT_GREEN='\x1B[0;32m'
  NC='\x1B[0m' # No Color
else
  BLUE='\e[0;34m'
  LIGHT_GREY='\e[0;37m'
  DARK_RED='\e[1;31m'
  LIGHT_RED='\e[0;31m'
  LIGHT_GREEN='\e[0;32m'
  NC='\e[0m' # No Color
fi

exec 3>&2 # logging stream (file descriptor 3) defaults to STDERR

DEBUG_LEVEL=0
INFO_LEVEL=1
WARNING_LEVEL=2
ERROR_LEVEL=3
FATAL_LEVEL=4

error() { log $ERROR_LEVEL "${DARK_RED}$1${NC}"; }
warn() { log $WARNING_LEVEL "${LIGHT_RED}$1${NC}"; }
notify() { log $INFO_LEVEL "${NC}$1${NC}"; }
info() { log $INFO_LEVEL "${NC}$1${NC}"; }
debug() { log $DEBUG_LEVEL "${LIGHT_GREY}$1${NC}"; }

error_all() { [[ "$1" != "/dev/null" ]] && (tail -n 100 $1 > $1.last ; while read line; do error "$line" ; done < $1.last ;) }
warn_all() { [[ "$1" != "/dev/null" ]] && (tail -n 100 $1 > $1.last ; while read line; do warn "$line" ; done < $1.last ;) }
notify_all() { [[ "$1" != "/dev/null" ]] && (tail -n 100 $1 > $1.last ; while read line; do notify "$line" ; done < $1.last ;) }
info_all() { [[ "$1" != "/dev/null" ]] && (tail -n 100 $1 > $1.last ; while read line; do notify "$line" ; done < $1.last ;) }
debug_all() { [[ "$1" != "/dev/null" ]] && (tail -n 100 $1 > $1.last ; while read line; do debug "$line" ; done < $1.last ;) }

blue() { pp "${BLUE}$1${NC}"; }
grey() { pp "${LIGHT_GREY}$1${NC}"; }
red() { pp "${DARK_RED}$1${NC}"; }
green() { pp "${LIGHT_GREEN}$1${NC}"; }
black() { pp "$1"; }

log() {
  LOGLEVEL=${LOGLEVEL-$INFO_LEVEL}
  if [ "$LOGLEVEL" -le "$1" ] && [ ! -z "$2" ]; then
    pp "$2"
  fi
}

pp() {
  if [[ `uname` == "Darwin" ]]; then
    echo -e "$1" >&3
  else
    # Expand escaped characters, wrap at 70 chars, indent wrapped lines
    echo -e "$1" | sed '2~1s/^/  /' >&3
  fi
}

#--------------------
# INSATLLER
#--------------------

internal_version()
{
  cat $1 | grep ^VERSION= | awk -F'=' '{print $2}'
}

throw () {
  echo "$*" >&2
  exit 1
}

handle_error()
{
  local RETURN_CODE=$1
  local ANSWER="$2"
  local TITLE="$3"
  local LOGFILE=${LOGFILE-/tmp/bits.log}
  if [ $RETURN_CODE -ne 0 ] ; then
    error "$TITLE"
    if [[ "$ANSWER" != "" ]]; then
      error "$ANSWER"
    fi
    error_all $LOGFILE
    error ""
    exit 1
  fi
}

#--------------------
# HELP
#--------------------

do_help()
{
  case "$1" in

  "ls")
    help_ls
    ;;

  "install")
    help_install
    ;;

  "install-if")
    help_install_if
    ;;

  "installed?")
    help_installed_qmark
    ;;

  "help")
    help_help
    ;;

  "init")
    help_init
    ;;
  *)
    help_usage
    ;;
  esac
}

help_usage()
{
  printf "%b" "${BLUE}
=============================
 bits $VERSION
 An opinionated view on installing software.

 More information at
 https://github.com/capbash/bits
=============================
${NC}

Usage

  ${LIGHT_GREEN}<options>* bits <action> <args>*${NC}

Setup Actions

  ${LIGHT_GREEN}init${NC}                ${DARK_GREY}- Initialize the local directory to access a digital ocean account${NC}
  ${LIGHT_GREEN}update-self${NC}         ${DARK_GREY}- Upgrade to latest version${NC}
  ${LIGHT_GREEN}version${NC}             ${DARK_GREY}- Display just version information, like 'bits $VERSION'${NC}
  ${LIGHT_GREEN}help${NC}                ${DARK_GREY}- Show this message${NC}
  ${LIGHT_GREEN}help <ACTION>${NC}       ${DARK_GREY}- Display help for <ACTION>${NC}

Query Actions

  ${LIGHT_GREEN}ls${NC}                  ${DARK_GREY}- Show all available bits that can be installed${NC}
  ${LIGHT_GREEN}installed?${NC}          ${DARK_GREY}- List all bits that are installed${NC}
  ${LIGHT_GREEN}installed? <BIT>${NC}    ${DARK_GREY}- Is the <BIT> installed? Echo the bit if yes, and nothing if not${NC}

Modification Actions

  ${LIGHT_GREEN}install <BIT>${NC}       ${DARK_GREY}- Install the <BIT>${NC}
  ${LIGHT_GREEN}install-if <BIT>${NC}    ${DARK_GREY}- Install the <BIT> only if it's not installed${NC}

${LIGHT_GREY}
For reporting issues, please contact aforward@gmail.com, or
report directly against the project at https://github.com/capbash/bits
${NC}
"
}

help_ls()
{
  printf "%b" "${NC}
To list all available for installation

  ${LIGHT_GREEN}bits ls${NC}

For example,

  ${LIGHT_GREEN}elixir
  phoenix
  postgres${NC}

"
}

help_install()
{
  printf "%b" "${NC}
To install a bit on your server

  ${LIGHT_GREEN}bits install <BIT>${NC}

For example,

  ${LIGHT_GREEN}bits install elixir${NC}

If the bit has environment variable, simply pass them along for the ride

  ${LIGHT_GREEN}ELIXIR_VERSION=1.11.4 bits install elixir${NC}

"
}

help_install_if()
{
  printf "%b" "${NC}
If you only want to install a bit if it hasn't already been installd, then

  ${LIGHT_GREEN}bits install-if <BIT>${NC}

For example,

  ${LIGHT_GREEN}bits install-if elixir${NC}

If the bit has environment variable, simply pass them along for the ride

  ${LIGHT_GREEN}ELIXIR_VERSION=1.11.4 bits install-if elixir${NC}

"
}

help_installed_qmark()
{
  printf "%b" "${NC}
To check to see what's installed

  ${LIGHT_GREEN}bits installed?${NC}

This is should all installed bits, for example,

  ${LIGHT_GREEN}elixir
  postgres${NC}

This is useful only for showing infrastructure installations
like programming languages, databases, and global configurations.
This will not help when installing, for example, your git repos.

To check to see if a particular bit is installed, then

  ${LIGHT_GREEN}bits installed? <BIT>${NC}

For example,

  ${LIGHT_GREEN}bits installed? phoenix${NC}

If the bit is installed, it will echo itself otherwise it will echo nothing

"
}

help_help()
{
  printf "%b" "${NC}
That's too meta for me!

"

}

help_init()
{
  printf "%b" "${NC}
This will initialize your local directory with environment
variables defaults to make command line operations a little
more palateble.

  ${LIGHT_GREEN}bits init${NC}

This call will create a .bits file with placeholders for your
account; this includes

  ${LIGHT_GREY}# Where are your trusted bash bit scripts?
  # At the moment we only support URLs
  # File paths are coming
  # ${LIGHT_GREEN}BITS_URL=${DEFAULT_BITS_URL}${NC}
  # ${LIGHT_GREEN}BITS_MODE=${DEFAULT_BITS_MODE}${NC}
  # ${LIGHT_GREEN}TOUCH_DIR=${DEFAULT_TOUCH_DIR}${NC}
  # ${LIGHT_GREEN}INSTALL_DIR=${DEFAULT_INSTALL_DIR}${NC}

The ${LIGHT_GREEN}BITS_URL${NC} is where to find your bit
scripts and can be either an actual URL (e.g. ${LIGHT_GREY}https:/bits.local${NC})
or if ${LIGHT_GREEN}BITS_MODE=file${NC} then a local path to
bits (e.g ${LIGHT_GREY}/opt/bits${NC}).

The ${LIGHT_GREEN}TOUCH_DIR${NC} is where we drop .bits
files to show which operations have been run.
"
}

#--------------------
# ACTIONS
#--------------------

read_config()
{
  if [[ -e ".bits" ]]; then
    debug "Reading in configs from .bits"
    . .bits
  else
    debug "No .bits file, skippping"
  fi
}

do_ls()
{
  CURLOPT_FRESH_CONNECT=true curl -s https://raw.githubusercontent.com/capbash/bits/master/help/ls
  echo ""
}

do_init()
{

  if [[ -e ".bits" ]]; then
    warn "bits already initialized, take a look in .bits"
  else
  info "Initalizing bits..."
printf "%b" "# bits $VERSION
# Where are your trusted bash bit scripts?
# At the moment we only support URLs
# File paths are coming
# BITS_URL=${DEFAULT_BITS_URL}
# BITS_MODE=${DEFAULT_BITS_MODE}
# TOUCH_DIR=${DEFAULT_TOUCH_DIR}
# INSTALL_DIR=${DEFAULT_INSTALL_DIR}
" > ".bits"
  fi
}

do_install()
{
  BIT=$1
  if [[ "$BIT" == "" ]]; then
    error "Please provide a bit to install, run ${LIGHT_GREEN}bits ls${NC} to see available bits."
  else
    local LOGFILE=${LOGFILE-/tmp/bits.$BIT.log}
    info "Installing $BIT (tail -f $LOGFILE) ..."
    BITS_URL=${BITS_URL-$DEFAULT_BITS_URL}
    BITS_MODE=${BITS_MODE-$DEFAULT_BITS_MODE}
    export TOUCH_DIR=${TOUCH_DIR-$DEFAULT_TOUCH_DIR}
    export INSTALL_DIR=${INSTALL_DIR-$DEFAULT_INSTALL_DIR}
    touch "${TOUCH_DIR}/$BIT.start"

    case "${BITS_MODE}" in
      "curl")
        debug "  ... Running bash <(curl -s $BITS_URL/$BIT.bits)"
        ANSWER=$(CURLOPT_FRESH_CONNECT=true bash <(curl -s $BITS_URL/$BIT.bits) &> $LOGFILE)
        ;;

      "file")
        debug "  ... Running bash <(cat $BITS_URL/$BIT.bits)"
        ANSWER=$(bash $BITS_URL/$BIT.bits &> $LOGFILE)
        ;;
    esac

    handle_error $? "$ANSWER" "Unable to install $BIT"

    if [ -e "${TOUCH_DIR}/$BIT.start" ]; then
      mv "${TOUCH_DIR}/$BIT.start" "${TOUCH_DIR}/$BIT.bits"
    else
      touch "${TOUCH_DIR}/$BIT.bits"
    fi

    info "DONE, Installing $BITS"
  fi
}

do_install_if()
{
  BIT=$1
  if [[ "$BIT" == "" ]]; then
    error "Please provide a bit to install, run ${LIGHT_GREEN}bits ls${NC} to see available bits."
  elif [[ "$(do_installed_qmark $BIT)" == "" ]]; then
    do_install $@
  else
    debug "$BIT already installed, skipping."
  fi
}

do_installed_qmark()
{
  BIT=$1
  TOUCH_DIR=${TOUCH_DIR-$DEFAULT_TOUCH_DIR}
  if [[ -e ${TOUCH_DIR}/$BIT.bits ]]; then
    echo "$BIT"
  fi
}

do_replace_self()
{
  current_bits_filename=$(which bits)
  CURLOPT_FRESH_CONNECT=true curl -s -o $current_bits_filename https://raw.githubusercontent.com/capbash/bits/master/bits
}

do_update_self()
{
  current_bits_filename=$(which bits)
  tmp_bits_filename=$current_bits_filename.old
  cp $current_bits_filename $tmp_bits_filename
  OLD_VERSION=$(internal_version $current_bits_filename)
  info "Updating from $OLD_VERSION to latest version of bits in ${current_bits_filename}"
  debug "The old version will be stored at $tmp_bits_filename"
  info "When done run '${BLUE}bits version${NC}' for the new version."
  $tmp_bits_filename replace-self &
}

#--------------------
# COMMAND LINE PARSER
#--------------------

cli()
{

  case "$1" in

  "ls")
    do_ls
    ;;

  "install")
    shift
    do_install $@
    ;;

  "install-if")
    shift
    do_install_if $@
    ;;

  "installed?")
    shift
    do_installed_qmark $@
    ;;

  "help")
    shift
    do_help $@
    ;;

  "replace-self")
    do_replace_self
    ;;

  "update-self")
    do_update_self
    ;;

  "init")
    do_init
    ;;

  "version")
    echo -e "${BLUE}bits ${VERSION}${NC}"
    exit 0
    ;;

  *)
    help_usage
    exit 0
    ;;
  esac

}

read_config
cli $@
